name: Production/Staging ðŸš€

on:
  workflow_call:
    secrets:
      SERVICE_ECR_REPO_NAME:
        description: Service ECR repo name
        required: true
      SERVICE_NAME:
        description: Service name
        required: true
      SENTRY_AUTH_TOKEN:
        description: Sentry auth token for creating releases
        required: false
      SENTRY_ORG:
        description: Sentry organization slug
        required: false
      SENTRY_PROJECT:
        description: Sentry project slug
        required: false

env:
  ECR_REPOSITORY: ${{ secrets.SERVICE_ECR_REPO_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:

  validation:
    runs-on: ubuntu-latest
    name: 'Detect pull request context'

    steps:
      - uses: hmarr/debug-action@v2

      - name: Determine the deployment flow
        id: determine_context
        run: |
          declare -A workflow
          workflow[context]=true
          if  [[ ${{ github.event.action }} == "closed" && ${{ github.event.pull_request.merged }} == true ]] ; then
            workflow[notify]='master,sandbox'
            workflow[pushto]='master'
            workflow[reset]=''
            workflow[source]="pr"
          elif [[ ${{ github.event.action }} == "labeled" ]] ; then
            if  [[ "${{ github.event.label.name }}" == "staging" ]] ; then
              workflow[notify]='staging'
              workflow[pushto]='staging'
              workflow[reset]=''
              workflow[source]="pr"
            else
              echo "Labled to unsupported environment"
              exit 1
            fi
          elif [[ ${{ github.event.action }} == "unlabeled" ]] ; then
            if  [[ "${{ github.event.label.name }}" == "staging" ]] ; then
              workflow[notify]='staging'
              workflow[pushto]=''
              workflow[reset]='staging'
              workflow[source]="master"
            else
              echo "Unlabled from unsupported environment"
              exit 1
            fi
          elif [[ ${{ contains('reopened, synchronize', github.event.action) }} == "true" ]] ; then
            if [[ ${{ contains(join(github.event.pull_request.labels.*.name, ','), 'staging') }} == 'false' ]] ; then
              echo "No lable found on the PR to push to"
              workflow[context]=false
              exit 0
            fi
            workflow[notify]='${{ join(github.event.pull_request.labels.*.name, ',') }}'
            workflow[pushto]='${{ join(github.event.pull_request.labels.*.name, ',') }}'
            workflow[reset]=''
            workflow[source]="pr"
          elif [[ ${{ contains('closed', github.event.action) }} == "true" ]] ; then
            if [[ ${{ contains(join(github.event.pull_request.labels.*.name, ','), 'staging') }} == 'false' ]] ; then
              echo "No lable found on the PR to rest into"
              workflow[context]=false
              exit 0
            fi
            workflow[notify]='${{ join(github.event.pull_request.labels.*.name, ',') }}'
            workflow[pushto]=''
            workflow[reset]='${{ join(github.event.pull_request.labels.*.name, ',') }}'
            workflow[source]="master"
          else
            echo "Unrecognized action type"
            exit 1
          fi

          echo "notify: ${workflow[notify]}"
          echo "pushto: ${workflow[pushto]}"
          echo "source: ${workflow[source]}"
          echo "reset: ${workflow[reset]}"
          echo "context: ${workflow[context]}"

          echo "::set-output name=notify::${workflow[notify]}"
          echo "::set-output name=pushto::${workflow[pushto]}"
          echo "::set-output name=reset::${workflow[reset]}"
          echo "::set-output name=source::${workflow[source]}"
          echo "::set-output name=context::${workflow[context]}"

    outputs:
      deployment-notify: ${{ steps.determine_context.outputs.notify }}
      deployment-pushto: ${{ steps.determine_context.outputs.pushto }}
      deployment-source: ${{ steps.determine_context.outputs.source }}
      deployment-reset: ${{ steps.determine_context.outputs.reset }}
      deployment-context: ${{ steps.determine_context.outputs.context }}

  new-build-started:
    runs-on: ubuntu-latest
    name: 'Build and Push Docker Image'
    permissions:
      id-token: write
      contents: read
      actions: read
    needs: [validation]
    if: ${{ needs.validation.outputs.deployment-context }}
    steps:
      - name: (Staging) New build Started
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'staging' ) }}
        uses: 8398a7/action-slack@v3
        with:
          text: 'New Backend Service Build Started ðŸš€'
          status: 'cancelled'
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          fields: repo,ref,message,author,eventName,workflow
          icon_emoji: ':rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_STAGING }}

      - name: (Production) New build Started
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'master' ) }}
        uses: 8398a7/action-slack@v3
        with:
          text: 'New Backend Service Build Started ðŸš€'
          status: 'cancelled'
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          fields: repo,ref,message,author,eventName,workflow
          icon_emoji: ':rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT }}

      - name: Checkout PR code
        if: ${{ contains(needs.validation.outputs.deployment-source, 'pr') }}
        uses: actions/checkout@v3

      - name: Checkout Master code
        if: ${{ contains(needs.validation.outputs.deployment-source, 'master') }}
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set AWS account
        id: aws_account
        run: |
          if [[ "${{ contains(needs.validation.outputs.deployment-pushto, 'master') }}" == "true" ]]; then
            echo "##[set-output name=accountId;]$(echo ${{ secrets.AWS_PROD_ACCOUNT_ID }})"
          else
            echo "##[set-output name=accountId;]$(echo ${{ secrets.AWS_STAGING_ACCOUNT_ID }})"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: steps.aws_account.outputs.accountId
        with:
          role-to-assume: 'arn:aws:iam::${{ steps.aws_account.outputs.accountId }}:role/${{ secrets.AWS_ROLE_TO_PUSH_IMG }}'
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: steps.aws_account.outputs.accountId
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildkit
        uses: docker/setup-buildx-action@v1
        id: buildx
      - name: Cache Docker layers
        id: cache-venv  # name for referring later
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Get Tags for Image
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.SERVICE_ECR_REPO_NAME }}
          tags: |
            type=raw,value=${{ github.sha }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.IMG_TAG_APP_ID }}
          private_key: ${{ secrets.IMG_TAG_APP_PRIVATE_KEY }}
          installation_id: ${{ secrets.IMG_TAG_INST_ID }}
          repository: ${{ secrets.K8S_DEFINITION_REPO }}

      - name: Checkout Target Repository (k8s_definitions)
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.K8S_DEFINITION_REPO }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Reset imageSource Tag from staging HelmChart
        if: ${{ contains(needs.validation.outputs.deployment-reset, 'staging') }}
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.imageSource = ""' '${{ secrets.SERVICE_NAME }}/staging-values.yaml'

      - name: Commit & push reset staging values
        if: ${{ contains(needs.validation.outputs.deployment-reset, 'staging') }}
        run: |
          git add "${{ secrets.SERVICE_NAME }}/staging-values.yaml"
          git commit -m "${{ github.actor }} Reset ${{ secrets.SERVICE_NAME }} Image Tag"
          git push

      - name: Update Image Tag & SENTRY_RELEASE in production HelmChart
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'master') }}
        uses: mikefarah/yq@master
        env:
          GIT_SHA: ${{ env.IMAGE_TAG }}
        with:
          cmd: |
            yq -i '.image.tag = strenv(GIT_SHA)' '${{ secrets.SERVICE_NAME }}/values.yaml'
            yq -i '( .environmentVariables[] | select(.name == "SENTRY_RELEASE") ).value = strenv(GIT_SHA)' '${{ secrets.SERVICE_NAME }}/master-values.yaml'

      - name: Commit & push updated production values
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'master') }}
        run: |
          git add "${{ secrets.SERVICE_NAME }}/values.yaml" "${{ secrets.SERVICE_NAME }}/master-values.yaml"
          git commit -m "${{ github.actor }}: bump image.tag and SENTRY_RELEASE to ${{ env.IMAGE_TAG }}"
          git push

      - name: Update imageSource & SENTRY_RELEASE in staging HelmChart
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'staging') }}
        uses: mikefarah/yq@master
        env:
          NEW_IMAGE: ${{ secrets.AWS_STAGING_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          GIT_SHA: ${{ env.IMAGE_TAG }}
        with:
          cmd: |
            yq -i '.imageSource = strenv(NEW_IMAGE)' '${{ secrets.SERVICE_NAME }}/staging-values.yaml'
            yq -i '( .environmentVariables[] | select(.name == "SENTRY_RELEASE") ).value = strenv(GIT_SHA)' '${{ secrets.SERVICE_NAME }}/staging-values.yaml'

      - name: Commit & push updated staging values
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'staging') }}
        run: |
          git add "${{ secrets.SERVICE_NAME }}/staging-values.yaml"
          git commit -m "${{ github.actor }}: bump imageSource and SENTRY_RELEASE to ${{ env.IMAGE_TAG }}"
          git push

      - name: Create Sentry release for production
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'master') && secrets.SENTRY_AUTH_TOKEN != '' }}
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: prod-backend-thrivve
        with:
          environment: production
          release: ${{ env.IMAGE_TAG }}
          set_commits: auto
          ignore_missing: true
          ignore_empty: true

      - name: Create Sentry release for staging
        if: ${{ contains(needs.validation.outputs.deployment-pushto, 'staging') && secrets.SENTRY_AUTH_TOKEN != '' }}
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: stage-backend-thrivve
        with:
          environment: staging
          release: ${{ env.IMAGE_TAG }}
          set_commits: auto
          ignore_missing: true
          ignore_empty: true

      - name: (Staging) Send notification when a build is done
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'staging' ) }}
        uses: 8398a7/action-slack@v3
        with:
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          status: 'success'
          text: 'Backend Service Build Succeeded âœ…'
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: 'âœ…'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_STAGING }}

      - name: (Production) Send notification when a build is done
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'master' ) }}
        uses: 8398a7/action-slack@v3
        with:
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          status: 'success'
          text: 'Backend Service Build Succeeded âœ…'
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: 'âœ…'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT }}

  send-workflow-failure:
    runs-on: ubuntu-latest
    name: 'Send fail notification'
    permissions:
      contents: read
      actions: read
    needs: [ validation , new-build-started ]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - name: (Staging) Send notification when a build is done
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'staging' ) }}
        uses: 8398a7/action-slack@v3
        with:
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          mention: 'here'
          status: 'failure'
          text: 'Backend Service Build Failed ðŸ”´'
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: 'ðŸ”´'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_STAGING }}

      - name: (Production) Send notification when a build is done
        if: ${{ contains(needs.validation.outputs.deployment-notify, 'master' ) }}
        uses: 8398a7/action-slack@v3
        with:
          author_name: 'Service Builds'
          icon_url: 'https://avatars.githubusercontent.com/u/71592178?s=48&v=4'
          mention: 'here'
          status: 'failure'
          text: 'Backend Service Build Failed ðŸ”´'
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: 'ðŸ”´'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT }}
