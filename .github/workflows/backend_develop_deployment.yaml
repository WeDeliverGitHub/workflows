# This is a basic workflow to help you get started with Actions

name: Develop ðŸš€

on:
  workflow_call:
    secrets:
      SERVICE_ECR_REPO_NAME:
        description: Service ECR repo name
        required: true
      SERVICE_NAME:
        description: Service name
        required: true
      SENTRY_AUTH_TOKEN:
        description: Sentry auth token for creating releases
        required: false
      SENTRY_ORG:
        description: Sentry organization slug
        required: false
      SENTRY_PROJECT:
        description: Sentry project slug
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-push-image:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      actions: read

    steps:
      - name: New build Started
        uses: 8398a7/action-slack@v3
        with:
          text: "New Backend Service Build Started ðŸš€"
          status: "cancelled"
          author_name: "Service Builds"
          icon_url: "https://avatars.githubusercontent.com/u/71592178?s=48&v=4"
          fields: repo,ref,message,author,eventName,workflow
          icon_emoji: ":rocket:"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_DEV }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_DEV_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_TO_PUSH_IMG }}"
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.7

      - name: Determine if test-requirements is the choice
        id: package_source
        run: |
          labels=${{ steps.pr-labels.outputs.labels }}
          echo "Labels: $labels"
          if  [[ ${{ contains(steps.pr-labels.outputs.labels, 'use-test-requirements') }} == true ]] ; then
            echo "USE_TEST_REQUIREMENTS=true" >> $GITHUB_OUTPUT
          else
            echo "USE_TEST_REQUIREMENTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.SERVICE_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg use_test_requirements=${{ steps.package_source.outputs.USE_TEST_REQUIREMENTS }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-helm-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # need write to push back our commit
      actions: read
    needs: build-push-image
    if: success()
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.IMG_TAG_APP_ID }}
          private_key: ${{ secrets.IMG_TAG_APP_PRIVATE_KEY }}
          installation_id: ${{ secrets.IMG_TAG_INST_ID }}
          repository: ${{ secrets.K8S_DEFINITION_REPO }}

      - name: Checkout Target Repository (k8s_definitions)
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.K8S_DEFINITION_REPO }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Configure Git
        run: |
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Update Image Tag & SENTRY_RELEASE
        env:
          NEW_IMAGE: ${{ secrets.AWS_DEV_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/${{ secrets.SERVICE_ECR_REPO_NAME }}:${{ github.sha }}
          GIT_SHA: ${{ github.sha }}
        run: |
          # install yq
          sudo apt-get update && sudo apt-get install -y yq

          FILE="${{ secrets.SERVICE_NAME }}/develop-values.yaml"

          # bump the Docker image tag
          yq eval -i '.imageSource = strenv(NEW_IMAGE)' "$FILE"

          # bump the SENTRY_RELEASE under environmentVariables
          yq eval -i '(.environmentVariables[] | select(.name=="SENTRY_RELEASE")).value = strenv(GIT_SHA)' "$FILE"

          # commit & push both changes at once
          git add "$FILE"
          git commit -m "${{ github.actor }}: bump imageSource and SENTRY_RELEASE to $GIT_SHA"
          git push

      - name: Create Sentry release
        if: success() && secrets.SENTRY_AUTH_TOKEN != ''
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: develop
          release: ${{ github.sha }}
          set_commits: auto
          ignore_missing: true
          ignore_empty: true

  send-workflow-success:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    needs: [build-push-image, update-helm-tag]
    if: success()
    steps:
      - name: Send notification when a build is done
        uses: 8398a7/action-slack@v3
        with:
          author_name: "Service Builds"
          icon_url: "https://avatars.githubusercontent.com/u/71592178?s=48&v=4"
          status: "success"
          text: "Backend Service Build Succeeded âœ…"
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: "âœ…"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_DEV }}

  send-workflow-failure:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    needs: [build-push-image, update-helm-tag]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - name: Send notification when a build is done
        uses: 8398a7/action-slack@v3
        with:
          author_name: "Service Builds"
          icon_url: "https://avatars.githubusercontent.com/u/71592178?s=48&v=4"
          mention: "here"
          status: "failure"
          text: "Backend Service Build Failed ðŸ”´"
          fields: repo,message,commit,author,eventName,ref,workflow,job
          icon_emoji: "ðŸ”´"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_SRV_BLD_ALRT_DEV }}
